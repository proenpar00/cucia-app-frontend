{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cabel\\\\Desktop\\\\AppCucia_Extended\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport NavBar from './components/NavBar';\nimport ImageUploader from './components/ImageUploader';\nimport ImagePreview from './components/ImagePreview';\nimport ModelSelector from './components/ModelSelector';\nimport DiagnosisButton from './components/DiagnosisButton';\nimport DiagnosisResult from './components/DiagnosisResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [imageId, setImageId] = useState(null);\n  const [detections, setDetections] = useState([]);\n  const [model, setModel] = useState(null);\n  const handleImageChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedImage(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      setModelLoaded(false);\n      setDetections([]);\n      console.log('Imagen seleccionada:', file);\n    }\n  };\n  const handleLoadModel = async () => {\n    if (!selectedImage) {\n      alert('Por favor, sube una imagen primero');\n      return;\n    }\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('image', selectedImage);\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API}/api/v1/image`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('Respuesta del backend recibida:', response.data);\n      if (response.data && response.data.id) {\n        setImageId(response.data.id);\n        setModelLoaded(true);\n        console.log('Modelo cargado correctamente. ID de la imagen:', response.data.id);\n      } else {\n        alert('Error al cargar el modelo: No se recibió un ID válido.');\n      }\n    } catch (error) {\n      console.error('Error al cargar el modelo:', error);\n      alert('Error al cargar el modelo: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleShowDiagnosis = async () => {\n    if (!imageId) {\n      alert('No hay diagnóstico disponible. Sube una imagen y carga el modelo primero.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API}/api/v1/image/${imageId}`);\n      console.log('Respuesta del diagnóstico recibida:', response.data);\n      const base64Image = response.data.base64;\n      const detections = response.data.detections;\n      if (base64Image) {\n        setPreviewUrl(`data:image/jpeg;base64,${base64Image}`);\n        setDetections(detections);\n      } else {\n        alert('No se recibió una imagen válida desde el servidor.');\n      }\n    } catch (error) {\n      console.error('Error al obtener el diagnóstico:', error);\n      alert('Error al obtener el diagnóstico: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(ImagePreview, {\n          preview: previewUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageUploader, {\n          onImageChange: handleImageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModelSelector, {\n          onSelect: setModel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DiagnosisButton, {\n          modelLoaded: modelLoaded,\n          onClick: modelLoaded ? handleShowDiagnosis : handleLoadModel,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: /*#__PURE__*/_jsxDEV(DiagnosisResult, {\n          detections: detections\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"71j6fgTxgk1sRGOvPiv6tfWJ/t4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","NavBar","ImageUploader","ImagePreview","ModelSelector","DiagnosisButton","DiagnosisResult","jsxDEV","_jsxDEV","App","_s","selectedImage","setSelectedImage","previewUrl","setPreviewUrl","loading","setLoading","modelLoaded","setModelLoaded","imageId","setImageId","detections","setDetections","model","setModel","handleImageChange","event","file","target","files","URL","createObjectURL","console","log","handleLoadModel","alert","formData","FormData","append","response","post","process","env","REACT_APP_API","headers","data","id","error","message","handleShowDiagnosis","get","base64Image","base64","className","children","fileName","_jsxFileName","lineNumber","columnNumber","preview","onImageChange","onSelect","onClick","_c","$RefreshReg$"],"sources":["C:/Users/cabel/Desktop/AppCucia_Extended/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport NavBar from './components/NavBar';\nimport ImageUploader from './components/ImageUploader';\nimport ImagePreview from './components/ImagePreview';\nimport ModelSelector from './components/ModelSelector';\nimport DiagnosisButton from './components/DiagnosisButton';\nimport DiagnosisResult from './components/DiagnosisResult';\n\nconst App = () => {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [imageId, setImageId] = useState(null);\n  const [detections, setDetections] = useState([]);\n  const [model, setModel] = useState(null);\n\n  const handleImageChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedImage(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      setModelLoaded(false);\n      setDetections([]);\n      console.log('Imagen seleccionada:', file);\n    }\n  };\n\n  const handleLoadModel = async () => {\n    if (!selectedImage) {\n      alert('Por favor, sube una imagen primero');\n      return;\n    }\n\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('image', selectedImage);\n\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API}/api/v1/image`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n\n      console.log('Respuesta del backend recibida:', response.data);\n      if (response.data && response.data.id) {\n        setImageId(response.data.id);\n        setModelLoaded(true);\n        console.log('Modelo cargado correctamente. ID de la imagen:', response.data.id);\n      } else {\n        alert('Error al cargar el modelo: No se recibió un ID válido.');\n      }\n    } catch (error) {\n      console.error('Error al cargar el modelo:', error);\n      alert('Error al cargar el modelo: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleShowDiagnosis = async () => {\n    if (!imageId) {\n      alert('No hay diagnóstico disponible. Sube una imagen y carga el modelo primero.');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API}/api/v1/image/${imageId}`);\n      console.log('Respuesta del diagnóstico recibida:', response.data);\n\n      const base64Image = response.data.base64;\n      const detections = response.data.detections;\n      if (base64Image) {\n        setPreviewUrl(`data:image/jpeg;base64,${base64Image}`);\n        setDetections(detections);\n      } else {\n        alert('No se recibió una imagen válida desde el servidor.');\n      }\n    } catch (error) {\n      console.error('Error al obtener el diagnóstico:', error);\n      alert('Error al obtener el diagnóstico: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <NavBar />\n      <div className=\"content-container\">\n        <div className=\"left-panel\">\n          <ImagePreview preview={previewUrl} />\n          <ImageUploader onImageChange={handleImageChange} />\n          <ModelSelector onSelect={setModel} />\n          <DiagnosisButton\n            modelLoaded={modelLoaded}\n            onClick={modelLoaded ? handleShowDiagnosis : handleLoadModel}\n            loading={loading}\n          />\n        </div>\n        <div className=\"right-panel\">\n          <DiagnosisResult detections={detections} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}